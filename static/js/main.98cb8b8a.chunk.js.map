{"version":3,"sources":["App.jsx","index.js"],"names":["softShadows","SpinningBox","position","args","color","speed","useState","hovered","setHovered","expand","setExpand","props","useSpring","scale","mesh","useRef","useFrame","current","rotation","x","y","ref","castShadow","onPointerOver","onPointerOut","onClick","attach","MeshWobbleMaterial","factor","App","shadows","colorManagement","camera","fov","intensity","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","receiveShadow","Math","PI","opacity","OrbitControls","ReactDOM","render","document","getElementById"],"mappings":"qOAMAA,cAGA,IAAMC,EAAc,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,MAE3C,EAA6BC,oBAAS,GAAtC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA2BF,oBAAS,GAApC,mBAAOG,EAAP,KAAcC,EAAd,KACMC,EAAQC,oBAAU,CAEtBC,MAAOJ,EAAO,CAAC,IAAI,IAAI,KAAK,CAAC,EAAE,EAAE,KAE7BK,EAAOC,iBAAO,MAEpB,OADAC,aAAS,kBAAOF,EAAKG,QAAQC,SAASC,EAAIL,EAAKG,QAAQC,SAASE,GAAK,OAGnE,cADA,CACC,IAAEN,KAAH,CACAO,IAAKP,EACLZ,SAAUA,EACVoB,YAAU,EACVC,cAAe,kBAAIf,GAAW,IAC9BgB,aAAc,kBAAIhB,GAAW,IAC7BiB,QAAS,kBAAIf,GAAWD,IACxBI,MAAOF,EAAME,MAPb,UASE,mCAAmBa,OAAO,WAAWvB,KAAMA,IAC3C,cAACwB,EAAA,EAAD,CAAoBD,OAAO,WAAWtB,MAAQG,EAAc,cAANH,EAAqBC,MAAOA,EAAOuB,OAAQ,SAyDxFC,MAnDf,WAEE,OACE,mCAEE,eAAC,IAAD,CACEC,SAAO,EACPC,iBAAe,EACfC,OAAQ,CAAE9B,SAAU,EAAE,EAAE,EAAE,IAAK+B,IAAI,IAHrC,UAOE,8BAAcC,UAAW,KAEzB,kCACEZ,YAAU,EACVpB,SAAU,CAAC,EAAE,GAAG,GAChBgC,UAAW,IACXC,uBAAsB,KACtBC,wBAAuB,KACvBC,oBAAmB,GACnBC,sBAAqB,GACrBC,sBAAqB,GACrBC,oBAAmB,GACnBC,wBAAuB,KAKzB,4BAAYvC,SAAU,EAAE,GAAG,GAAG,IAAKgC,UAAW,KAE9C,4BAAYhC,SAAU,CAAC,GAAG,GAAG,GAAIgC,UAAW,IAC5C,kCACE,uBACAQ,eAAa,EACbxB,SAAU,EAAEyB,KAAKC,GAAG,EAAE,EAAE,GACxB1C,SAAU,CAAC,GAAG,EAAE,GAHhB,UAIE,qCAAqBwB,OAAO,WAAWvB,KAAM,CAAC,IAAI,OAClD,gCAAgBuB,OAAO,WAAUmB,QAAS,QAE5C,cAAC,EAAD,CAAa3C,SAAU,CAAC,EAAE,EAAE,GAAIC,KAAQ,CAAC,EAAE,EAAE,GAAIC,MAAM,YAAYC,MAAO,IAC1E,cAAC,EAAD,CAAaH,SAAU,EAAE,EAAE,GAAG,GAAIE,MAAM,OAAOC,MAAO,IACtD,cAAC,EAAD,CAAaH,SAAU,CAAC,EAAE,GAAG,GAAIE,MAAM,OAAOC,MAAO,OAGvD,cAACyC,EAAA,EAAD,UC5ERC,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.98cb8b8a.chunk.js","sourcesContent":["import React,{useRef, useState} from \"react\";\nimport {Canvas,useFrame} from \"@react-three/fiber\";\nimport {softShadows,MeshWobbleMaterial,OrbitControls} from \"@react-three/drei\";\nimport {useSpring,a} from \"@react-spring/three\";\nimport \"./App.css\";\n\nsoftShadows();\n\n//Always make a new component to use useFrame, because it calls useFrame infinite times causing an infinite loop\nconst SpinningBox = ({position ,args, color, speed}) =>{\n  // const [active,setActive] = useState(false);\n  const [hovered,setHovered] = useState(false);\n  const [expand,setExpand] = useState(false);\n  const props = useSpring({\n    // only use properties mesh have\n    scale: expand?[1.3,1.3,1.3]:[1,1,1],\n  })\n  const mesh = useRef(null);\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n  return(\n    // enclose mesh with a.mesh for animation\n    <a.mesh \n    ref={mesh}\n    position={position} \n    castShadow\n    onPointerOver={()=>setHovered(true)}\n    onPointerOut={()=>setHovered(false)}\n    onClick={()=>setExpand(!expand)}\n    scale={props.scale}\n    >\n      <boxBufferGeometry attach='geometry' args={args} />\n      <MeshWobbleMaterial attach='material' color={!hovered?color:\"lightpurple\"} speed={speed} factor={0.6}/>\n    </a.mesh>\n  );\n};\n\n\nfunction App() {\n  \n  return (\n    <>\n      {/* Will set Camera position and field of view(fov) */}\n      <Canvas \n        shadows\n        colorManagement \n        camera={{ position: [-5,2,10], fov:60}}\n      >\n\n        {/* Gives a global lighting to all the objects around */}\n        <ambientLight intensity={0.3} />\n        {/* directionalLight */}\n        <directionalLight\n          castShadow\n          position={[0,10,0]}\n          intensity={1.5}\n          shadow-mapSize-width={1024}\n          shadow-mapSize-height={1024}\n          shadow-camera-far={50}\n          shadow-camera-left={-10}\n          shadow-camera-right={10}\n          shadow-camera-top={10}\n          shadow-camera-bottom={-10}\n\n        />\n\n        {/* point light from leftside */}\n        <pointLight position={[-10,0,-20]} intensity={0.5}/>\n        {/* point light from bottomside */}\n        <pointLight position={[0,-10,0]} intensity={1}/>\n        <group>\n          <mesh  \n          receiveShadow\n          rotation={[-Math.PI/2,0,0]} \n          position={[0,-3,0]}>\n            <planeBufferGeometry attach='geometry' args={[100,100]} />\n            <shadowMaterial attach='material'opacity={0.3}/>\n          </mesh>\n          <SpinningBox position={[0,1,0]} args = {[3,2,1]} color=\"lightblue\" speed={2}/>\n          <SpinningBox position={[-2,1,-5]} color=\"pink\" speed={6}/>\n          <SpinningBox position={[5,1,-2]} color=\"pink\" speed={6}/>\n        </group>\n        \n        <OrbitControls />\n      </Canvas>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  \n    <App />,\n  \n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}